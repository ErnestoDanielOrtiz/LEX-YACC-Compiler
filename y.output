Grammar

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | /* empty */

    4 stmt: ';'
    5     | expr ';'
    6     | PRINT expr ';'
    7     | VARIABLE '=' expr ';'
    8     | WHILE '(' expr ')' stmt
    9     | DO stmt WHILE '(' expr ')' ';'
   10     | FOR '(' assign ';' expr ';' assign ')' stmt
   11     | IF '(' expr ')' stmt
   12     | IF '(' expr ')' stmt ELSE stmt
   13     | '{' stmt_list '}'

   14 stmt_list: stmt
   15          | stmt_list stmt

   16 expr: INTEGER
   17     | VARIABLE
   18     | '-' expr
   19     | expr '+' expr
   20     | expr '-' expr
   21     | expr '*' expr
   22     | expr '/' expr
   23     | expr '<' expr
   24     | expr '>' expr
   25     | expr GE expr
   26     | expr LE expr
   27     | expr NE expr
   28     | expr EQ expr
   29     | '(' expr ')'

   30 assign: VARIABLE '=' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 10 11 12 29
')' (41) 8 9 10 11 12 29
'*' (42) 21
'+' (43) 19
'-' (45) 18 20
'/' (47) 22
';' (59) 4 5 6 7 9 10
'<' (60) 23
'=' (61) 7 30
'>' (62) 24
'{' (123) 13
'}' (125) 13
error (256)
INTEGER (258) 16
VARIABLE (259) 7 17 30
WHILE (260) 8 9
DO (261) 9
FOR (262) 10
IF (263) 11 12
PRINT (264) 6
IFX (265)
ELSE (266) 12
NE (267) 27
EQ (268) 28
LE (269) 26
GE (270) 25
UMINUS (271)


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1, on right: 0
function (31)
    on left: 2 3, on right: 1 2
stmt (32)
    on left: 4 5 6 7 8 9 10 11 12 13, on right: 2 8 9 10 11 12 14 15
stmt_list (33)
    on left: 14 15, on right: 13 15
expr (34)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29,
    on right: 5 6 7 8 9 10 11 12 18 19 20 21 22 23 24 25 26 27 28 29
    30
assign (35)
    on left: 30, on right: 10


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (function)

    program   go to state 1
    function  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: function .
    2 function: function . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    $default  reduce using rule 1 (program)

    stmt  go to state 15
    expr  go to state 16


state 3

    0 $accept: program $end .

    $default  accept


state 4

   16 expr: INTEGER .

    $default  reduce using rule 16 (expr)


state 5

    7 stmt: VARIABLE . '=' expr ';'
   17 expr: VARIABLE .

    '='  shift, and go to state 17

    $default  reduce using rule 17 (expr)


state 6

    8 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 18


state 7

    9 stmt: DO . stmt WHILE '(' expr ')' ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt  go to state 19
    expr  go to state 16


state 8

   10 stmt: FOR . '(' assign ';' expr ';' assign ')' stmt

    '('  shift, and go to state 20


state 9

   11 stmt: IF . '(' expr ')' stmt
   12     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 21


state 10

    6 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 23


state 11

   18 expr: '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 24


state 12

    4 stmt: ';' .

    $default  reduce using rule 4 (stmt)


state 13

   29 expr: '(' . expr ')'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 25


state 14

   13 stmt: '{' . stmt_list '}'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt       go to state 26
    stmt_list  go to state 27
    expr       go to state 16


state 15

    2 function: function stmt .

    $default  reduce using rule 2 (function)


state 16

    5 stmt: expr . ';'
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ';'  shift, and go to state 38


state 17

    7 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 39


state 18

    8 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 40


state 19

    9 stmt: DO stmt . WHILE '(' expr ')' ';'

    WHILE  shift, and go to state 41


state 20

   10 stmt: FOR '(' . assign ';' expr ';' assign ')' stmt

    VARIABLE  shift, and go to state 42

    assign  go to state 43


state 21

   11 stmt: IF '(' . expr ')' stmt
   12     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 44


state 22

   17 expr: VARIABLE .

    $default  reduce using rule 17 (expr)


state 23

    6 stmt: PRINT expr . ';'
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ';'  shift, and go to state 45


state 24

   18 expr: '-' expr .
   19     | expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    $default  reduce using rule 18 (expr)


state 25

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr
   29     | '(' expr . ')'

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ')'  shift, and go to state 46


state 26

   14 stmt_list: stmt .

    $default  reduce using rule 14 (stmt_list)


state 27

   13 stmt: '{' stmt_list . '}'
   15 stmt_list: stmt_list . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14
    '}'       shift, and go to state 47

    stmt  go to state 48
    expr  go to state 16


state 28

   24 expr: expr '>' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 49


state 29

   23 expr: expr '<' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 50


state 30

   27 expr: expr NE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 51


state 31

   28 expr: expr EQ . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 52


state 32

   26 expr: expr LE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 53


state 33

   25 expr: expr GE . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 54


state 34

   19 expr: expr '+' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 55


state 35

   20 expr: expr '-' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 56


state 36

   21 expr: expr '*' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 57


state 37

   22 expr: expr '/' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 58


state 38

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


state 39

    7 stmt: VARIABLE '=' expr . ';'
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ';'  shift, and go to state 59


state 40

    8 stmt: WHILE '(' expr . ')' stmt
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ')'  shift, and go to state 60


state 41

    9 stmt: DO stmt WHILE . '(' expr ')' ';'

    '('  shift, and go to state 61


state 42

   30 assign: VARIABLE . '=' expr

    '='  shift, and go to state 62


state 43

   10 stmt: FOR '(' assign . ';' expr ';' assign ')' stmt

    ';'  shift, and go to state 63


state 44

   11 stmt: IF '(' expr . ')' stmt
   12     | IF '(' expr . ')' stmt ELSE stmt
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ')'  shift, and go to state 64


state 45

    6 stmt: PRINT expr ';' .

    $default  reduce using rule 6 (stmt)


state 46

   29 expr: '(' expr ')' .

    $default  reduce using rule 29 (expr)


state 47

   13 stmt: '{' stmt_list '}' .

    $default  reduce using rule 13 (stmt)


state 48

   15 stmt_list: stmt_list stmt .

    $default  reduce using rule 15 (stmt_list)


state 49

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   24     | expr '>' expr .
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 24 (expr)


state 50

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   23     | expr '<' expr .
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 23 (expr)


state 51

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   27     | expr NE expr .
   28     | expr . EQ expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 27 (expr)


state 52

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr
   28     | expr EQ expr .

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 28 (expr)


state 53

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   26     | expr LE expr .
   27     | expr . NE expr
   28     | expr . EQ expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 26 (expr)


state 54

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   25     | expr GE expr .
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 25 (expr)


state 55

   19 expr: expr . '+' expr
   19     | expr '+' expr .
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 19 (expr)


state 56

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   20     | expr '-' expr .
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 20 (expr)


state 57

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   21     | expr '*' expr .
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    $default  reduce using rule 21 (expr)


state 58

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   22     | expr '/' expr .
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    $default  reduce using rule 22 (expr)


state 59

    7 stmt: VARIABLE '=' expr ';' .

    $default  reduce using rule 7 (stmt)


state 60

    8 stmt: WHILE '(' expr ')' . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt  go to state 65
    expr  go to state 16


state 61

    9 stmt: DO stmt WHILE '(' . expr ')' ';'

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 66


state 62

   30 assign: VARIABLE '=' . expr

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 67


state 63

   10 stmt: FOR '(' assign ';' . expr ';' assign ')' stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 22
    '-'       shift, and go to state 11
    '('       shift, and go to state 13

    expr  go to state 68


state 64

   11 stmt: IF '(' expr ')' . stmt
   12     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt  go to state 69
    expr  go to state 16


state 65

    8 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 8 (stmt)


state 66

    9 stmt: DO stmt WHILE '(' expr . ')' ';'
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ')'  shift, and go to state 70


state 67

   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr
   30 assign: VARIABLE '=' expr .

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37

    $default  reduce using rule 30 (assign)


state 68

   10 stmt: FOR '(' assign ';' expr . ';' assign ')' stmt
   19 expr: expr . '+' expr
   20     | expr . '-' expr
   21     | expr . '*' expr
   22     | expr . '/' expr
   23     | expr . '<' expr
   24     | expr . '>' expr
   25     | expr . GE expr
   26     | expr . LE expr
   27     | expr . NE expr
   28     | expr . EQ expr

    '>'  shift, and go to state 28
    '<'  shift, and go to state 29
    NE   shift, and go to state 30
    EQ   shift, and go to state 31
    LE   shift, and go to state 32
    GE   shift, and go to state 33
    '+'  shift, and go to state 34
    '-'  shift, and go to state 35
    '*'  shift, and go to state 36
    '/'  shift, and go to state 37
    ';'  shift, and go to state 71


state 69

   11 stmt: IF '(' expr ')' stmt .
   12     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 72

    $default  reduce using rule 11 (stmt)


state 70

    9 stmt: DO stmt WHILE '(' expr ')' . ';'

    ';'  shift, and go to state 73


state 71

   10 stmt: FOR '(' assign ';' expr ';' . assign ')' stmt

    VARIABLE  shift, and go to state 42

    assign  go to state 74


state 72

   12 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt  go to state 75
    expr  go to state 16


state 73

    9 stmt: DO stmt WHILE '(' expr ')' ';' .

    $default  reduce using rule 9 (stmt)


state 74

   10 stmt: FOR '(' assign ';' expr ';' assign . ')' stmt

    ')'  shift, and go to state 76


state 75

   12 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 12 (stmt)


state 76

   10 stmt: FOR '(' assign ';' expr ';' assign ')' . stmt

    INTEGER   shift, and go to state 4
    VARIABLE  shift, and go to state 5
    WHILE     shift, and go to state 6
    DO        shift, and go to state 7
    FOR       shift, and go to state 8
    IF        shift, and go to state 9
    PRINT     shift, and go to state 10
    '-'       shift, and go to state 11
    ';'       shift, and go to state 12
    '('       shift, and go to state 13
    '{'       shift, and go to state 14

    stmt  go to state 77
    expr  go to state 16


state 77

   10 stmt: FOR '(' assign ';' expr ';' assign ')' stmt .

    $default  reduce using rule 10 (stmt)
